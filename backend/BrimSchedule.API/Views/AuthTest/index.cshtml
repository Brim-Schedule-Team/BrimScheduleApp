@page

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset=utf-8/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phone Authentication with invisible ReCaptcha</title>

    <!-- Material Design Theming -->
    <link rel="stylesheet" href="https://code.getmdl.io/1.1.3/material.orange-indigo.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <script defer src="https://code.getmdl.io/1.1.3/material.min.js"></script>

    <style>
    /**
     * Copyright 2015 Google Inc. All Rights Reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    html, body {
        font-family: 'Roboto', 'Helvetica', sans-serif;
        background-color: #f5f5f5;
    }
    a {
        text-decoration: none;
    }
    li a {
        text-decoration: underline;
        color: #0288d1;
    }
    .mdl-card {
        overflow: visible;
    }
    .grecaptcha-logo {
        background-color: white;
    }
    .mdl-grid {
        max-width: 1024px;
        margin: auto;
    }
    .mdl-layout__header-row {
        padding: 0;
    }
    .quickstart-user-details-container, .user-details-container {
        margin-top: 20px;
        line-height: 25px;
        flex: 1 1 50%;
    }
    #quickstart-sign-in-status, #sign-in-status, #backend-sign-in-status, #quickstart-tenant-id {
        font-weight: bold;
    }
    pre {
        overflow-x: scroll;
        line-height: 18px;
    }
    code {
        white-space: pre-wrap;
        word-break: break-all;
    }
    h3 {
        background-size: 40px;
        padding-left: 50px;
        color: white;
    }
    .close-icon {
        cursor: pointer;
        float: right;
        width: 20px;
    }
    .gcip-heading {
        background: none;
        padding-left: 10px;
    }
    #verification-code-form {
        display:none;
    }
    #recaptcha-container {
        margin-top: 10px;
        margin-bottom: 20px;
    }
    #verify-code-button, #cancel-verify-code-button {
        margin-left: 20px;
    }
    #sign-out-button {
        display: none;
    }
    #sign-in-card {
        z-index: 2;
    }
    .recaptcha-container {
        transform: scale(0.9);
        transform-origin:0 0;
        -webkit-transform:scale(0.9);
        -webkit-transform-origin:0 0;
    }
    .mfa-info-list-item {
        margin-bottom: 0px;
        margin-top: 0px;
        width: 300px;
    }
    .mdl-selectfield {
        height: 27px;
        padding-bottom: 20px;
        padding-top: 20px;
        width: 200px;
    }
    .mdl-selectfield__select {
        background:
                linear-gradient(45deg, transparent 50%, rgba(0,0,0, 0.26) 50%),
                linear-gradient(135deg, rgba(0,0,0, 0.26) 50%, transparent 50%),
                linear-gradient(to right, transparent, transparent);
        background-color: transparent;
        background-position:
                calc(100% - 10px) calc(1em - 4px),
                calc(100% - 5px) calc(1em - 4px),
                100% 0;
        background-repeat: no-repeat;
        background-size: 5px 5px, 5px 5px;
        border-color: rgba(0,0,0, 0.12);
        border-radius: 0;
        border-style: solid;
        border-width: 0 0 1px 0;
        box-shadow: none;
        box-sizing: border-box;
        height: 26px;
        line-height: 18px;
        margin: 0;
        outline: none !important;
        padding-bottom: 4px;
        padding-top: 4px;
        width: 100%;
        -moz-appearance:none;
        -moz-box-sizing: border-box;
        -webkit-appearance:none;
        -webkit-box-sizing: border-box;
    }
    .mdl-selectfield__label {
        color: rgba(0,0,0, 0.26);
        display: block;
        font-size: 16px;
        left: 0;
        overflow: hidden;
        pointer-events: none;
        position: relative;
        text-align: left;
        top: -23px;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        white-space: nowrap;
        width: 100%;
    }
    .mdl-selectfield__label.is-active {
        color: rgb(255,152,0);
        font-size: 12px;
        top: -40px;
    }
    .blinking{
        animation: blinkingText 1.2s infinite;
    }
    @@keyframes blinkingText {
        0% { color: #ff0000; }
        49% { color: transparent; }
        50% { color: transparent; }
        99% { color: #ff0000; }
        100% { color: #ff0000; }
    }
    #quickstart-tenant-card {
        min-height: 500px;
    }
    #quickstart-tenant-modal-title {
        margin: 0px;
        padding: 2px;
        text-align: center;
    }
    .display-flex {
        display: flex;
    }
  </style>
</head>
<body>
<div class="demo-layout mdl-layout mdl-js-layout mdl-layout--fixed-header">

    <!-- Header section containing title -->
    <header class="mdl-layout__header mdl-color-text--white mdl-color--light-blue-700">
        <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">
            <div class="mdl-layout__header-row mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--8-col-desktop">
                <a href="/">
                    <h3>Firebase Authentication</h3>
                </a>
            </div>
        </div>
    </header>

    <main class="mdl-layout__content mdl-color--grey-100">
        <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">

            <!-- Container for the demo -->
            <div id="sign-in-card" class="mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop">
                <div class="mdl-card__title mdl-color--light-blue-600 mdl-color-text--white">
                    <h2 class="mdl-card__title-text">Phone number authentication with invisible ReCaptcha</h2>
                </div>
                <div class="mdl-card__supporting-text mdl-color-text--grey-600">
                    <p>Sign in with your phone number below.</p>

                    <form id="sign-in-form" action="#">
                        <!-- Input to enter the phone number -->
                        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                            <input class="mdl-textfield__input" type="text" pattern="\+[0-9\s\-\(\)]+" id="phone-number">
                            <label class="mdl-textfield__label" for="phone-number">Enter your phone number...</label>
                            <span class="mdl-textfield__error">Input is not an international phone number!</span>
                        </div>

                        <!-- Sign-in button -->
                        <button disabled class="mdl-button mdl-js-button mdl-button--raised" id="sign-in-button">Sign-in</button>
                    </form>

                    <!-- Button that handles sign-out -->
                    <button class="mdl-button mdl-js-button mdl-button--raised" id="sign-out-button">Sign-out</button>

                    <form id="verification-code-form" action="#">
                        <!-- Input to enter the verification code -->
                        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                            <input class="mdl-textfield__input" type="text" id="verification-code">
                            <label class="mdl-textfield__label" for="verification-code">Enter the verification code...</label>
                        </div>

                        <!-- Button that triggers code verification -->
                        <input type="submit" class="mdl-button mdl-js-button mdl-button--raised" id="verify-code-button" value="Verify Code"/>
                        <!-- Button to cancel code verification -->
                        <button class="mdl-button mdl-js-button mdl-button--raised" id="cancel-verify-code-button">Cancel</button>
                    </form>
                </div>
                <br>
                <div class="mdl-card__title mdl-color--light-blue-600 mdl-color-text--white">
                    <h2 class="mdl-card__title-text">Backend actions</h2>
                </div>
                <div class="mdl-card__supporting-text mdl-color-text--grey-600">
                    <button class="mdl-button mdl-js-button mdl-button--raised" id="test-api-button">Test api</button>
                    <button class="mdl-button mdl-js-button mdl-button--raised" id="test-admin-api-button">Test admin api</button>
                    <button class="mdl-button mdl-js-button mdl-button--raised" id="grant-admin-role-button">Grant admin role</button>
                    <button class="mdl-button mdl-js-button mdl-button--raised" id="demote-admin-role-button">Demote admin</button>
                </div>
            </div>

            <!-- Container for the sign in status and user info -->
            <div id="user-details-card" class="mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop">
                <div class="mdl-card__title mdl-color--light-blue-600 mdl-color-text--white">
                    <h2 class="mdl-card__title-text">User sign-in status</h2>
                </div>
                <div class="mdl-card__supporting-text mdl-color-text--grey-600 display-flex">
                    <!-- Container where we'll display the user details -->
                    <div class="user-details-container">
                        Firebase sign-in status: <span id="sign-in-status">Unknown</span>
                        <div>Firebase auth <code>currentUser</code> object value:</div>
                        <pre><code id="account-details">null</code></pre>
                    </div>
                    <div class="user-details-container">
                        Backend sign-in status: <span id="backend-sign-in-status">Unknown</span>
                        <div>Backend auth <code>currentUser</code> object value:</div>
                        <pre><code id="backend-account-details">null</code></pre>
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>

<!-- Import and configure the Firebase SDK -->
<!-- These scripts are made available when the app is served or deployed on Firebase Hosting -->
<!-- If you do not serve/host your project using Firebase Hosting see https://firebase.google.com/docs/web/setup -->
<script src="https://www.gstatic.com/firebasejs/8.2.5/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.2.5/firebase-auth.js"></script>
<script>
    var firebaseConfig = {
        apiKey: "AIzaSyBWP7l3AxatwsC0LfSLgI6ZliFgXqpc5Pk",
        authDomain: "brimschedule.firebaseapp.com",
        projectId: "brimschedule",
        storageBucket: "brimschedule.appspot.com",
        messagingSenderId: "977874055127",
        appId: "1:977874055127:web:8b71d92208fcfdce6ce592"
      };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
</script>

<script type="text/javascript">

  /**
   * Set up UI event listeners and registering Firebase auth listeners.
   */
  window.onload = function() {
    // Listening for auth state changes.
    firebase.auth().onAuthStateChanged(function(user) {
      if (user) {
        // User is signed in.
        var uid = user.uid;
        var email = user.email;
        var photoURL = user.photoURL;
        var phoneNumber = user.phoneNumber;
        var isAnonymous = user.isAnonymous;
        var displayName = user.displayName;
        var providerData = user.providerData;
        var emailVerified = user.emailVerified;
      }
      updateSignInButtonUI();
      updateSignInFormUI();
      updateSignOutButtonUI();
      updateSignedInUserStatusUI();
      updateVerificationCodeFormUI();
    });

    // Event bindings.
    document.getElementById('sign-out-button').addEventListener('click', onSignOutClick);
    document.getElementById('test-api-button').addEventListener('click', onTestApiClick);
    document.getElementById('test-admin-api-button').addEventListener('click', onTestAdminApiClick);
    document.getElementById('grant-admin-role-button').addEventListener('click', onGrantAdminRoleClick);
    document.getElementById('demote-admin-role-button').addEventListener('click', onDemoteAdminRoleClick);
    document.getElementById('phone-number').addEventListener('keyup', updateSignInButtonUI);
    document.getElementById('phone-number').addEventListener('change', updateSignInButtonUI);
    document.getElementById('verification-code').addEventListener('keyup', updateVerifyCodeButtonUI);
    document.getElementById('verification-code').addEventListener('change', updateVerifyCodeButtonUI);
    document.getElementById('verification-code-form').addEventListener('submit', onVerifyCodeSubmit);
    document.getElementById('cancel-verify-code-button').addEventListener('click', cancelVerification);

    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('sign-in-button', {
      'size': 'invisible',
      'callback': function(response) {
        // reCAPTCHA solved, allow signInWithPhoneNumber.
        onSignInSubmit();
      }
    });

    recaptchaVerifier.render().then(function(widgetId) {
      window.recaptchaWidgetId = widgetId;
      updateSignInButtonUI();
    });
  };

  /**
   * Function called when clicking the Login/Logout button.
   */
  function onSignInSubmit() {
    if (isPhoneNumberValid()) {
      window.signingIn = true;
      updateSignInButtonUI();
      var phoneNumber = getPhoneNumberFromUserInput();
      var appVerifier = window.recaptchaVerifier;
      firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier)
          .then(function (confirmationResult) {
            // SMS sent. Prompt user to type the code from the message, then sign the
            // user in with confirmationResult.confirm(code).
            window.confirmationResult = confirmationResult;
            window.signingIn = false;
            updateSignInButtonUI();
            updateVerificationCodeFormUI();
            updateVerifyCodeButtonUI();
            updateSignInFormUI();
          }).catch(function (error) {
            // Error; SMS not sent
            console.error('Error during signInWithPhoneNumber', error);
            window.alert('Error during signInWithPhoneNumber:\n\n'
                + error.code + '\n\n' + error.message);
            window.signingIn = false;
            updateSignInFormUI();
            updateSignInButtonUI();
          });
    }
  }

  /**
   * Function called when clicking the "Verify Code" button.
   */
  function onVerifyCodeSubmit(e) {
    e.preventDefault();
    if (!!getCodeFromUserInput()) {
      window.verifyingCode = true;
      updateVerifyCodeButtonUI();
      var code = getCodeFromUserInput();
      confirmationResult.confirm(code).then(function (result) {
        // User signed in successfully.
        var user = result.user;
        window.verifyingCode = false;
        window.confirmationResult = null;
        updateVerificationCodeFormUI();
      }).catch(function (error) {
        // User couldn't sign in (bad verification code?)
        console.error('Error while checking the verification code', error);
        window.alert('Error while checking the verification code:\n\n'
            + error.code + '\n\n' + error.message);
        window.verifyingCode = false;
        updateSignInButtonUI();
        updateVerifyCodeButtonUI();
      });
    }
  }

  /**
   * Cancels the verification code input.
   */
  function cancelVerification(e) {
    e.preventDefault();
    window.confirmationResult = null;
    updateVerificationCodeFormUI();
    updateSignInFormUI();
  }

  /**
   * Signs out the user when the sign-out button is clicked.
   */
  function onSignOutClick() {
    firebase.auth().signOut();
  }

  /**
   * Reads the verification code from the user input.
   */
  function getCodeFromUserInput() {
    return document.getElementById('verification-code').value;
  }

  /**
   * Reads the phone number from the user input.
   */
  function getPhoneNumberFromUserInput() {
    return document.getElementById('phone-number').value;
  }

  /**
   * Returns true if the phone number is valid.
   */
  function isPhoneNumberValid() {
    var pattern = /^\+[0-9\s\-\(\)]+$/;
    var phoneNumber = getPhoneNumberFromUserInput();
    return phoneNumber.search(pattern) !== -1;
  }

  /**
   * Re-initializes the ReCaptacha widget.
   */
  function resetReCaptcha() {
    if (typeof grecaptcha !== 'undefined'
        && typeof window.recaptchaWidgetId !== 'undefined') {
      grecaptcha.reset(window.recaptchaWidgetId);
    }
  }

  /**
   * Updates the Sign-in button state depending on ReCAptcha and form values state.
   */
  function updateSignInButtonUI() {
    document.getElementById('sign-in-button').disabled =
        !isPhoneNumberValid()
        || !!window.signingIn;
  }

  /**
   * Updates the Verify-code button state depending on form values state.
   */
  function updateVerifyCodeButtonUI() {
    document.getElementById('verify-code-button').disabled =
        !!window.verifyingCode
        || !getCodeFromUserInput();
  }

  /**
   * Updates the state of the Sign-in form.
   */
  function updateSignInFormUI() {
    if (firebase.auth().currentUser || window.confirmationResult) {
      document.getElementById('sign-in-form').style.display = 'none';
    } else {
      resetReCaptcha();
      document.getElementById('sign-in-form').style.display = 'block';
    }
  }

  /**
   * Updates the state of the Verify code form.
   */
  function updateVerificationCodeFormUI() {
    if (!firebase.auth().currentUser && window.confirmationResult) {
      document.getElementById('verification-code-form').style.display = 'block';
    } else {
      document.getElementById('verification-code-form').style.display = 'none';
    }
  }

  /**
   * Updates the state of the Sign out button.
   */
  function updateSignOutButtonUI() {
    if (firebase.auth().currentUser) {
      document.getElementById('sign-out-button').style.display = 'block';
    } else {
      document.getElementById('sign-out-button').style.display = 'none';
    }
  }

  /**
   * Updates the Signed in user status panel.
   */
  function updateSignedInUserStatusUI() {
    var user = firebase.auth().currentUser;
    if (user) {
      document.getElementById('sign-in-status').textContent = 'Signed in';
      document.getElementById('account-details').textContent = JSON.stringify(user, null, '  ');
    } else {
      document.getElementById('sign-in-status').textContent = 'Signed out';
      document.getElementById('account-details').textContent = 'null';
    }
  }

  function sendTokenToBackend(url) {
    updateBackendSignedInUserStatusUI();

    backEndApiCall(url, 'GET',
        (response) => response.json()
            .then(json => {
              updateBackendSignedInUserStatusUI(json);
            })
        );
  }

  function onTestAdminApiClick() {
      let url = "/authTest/AdminLogin";
      sendTokenToBackend(url);
  }

  function onTestApiClick() {
      let url = "/authTest/login";
      sendTokenToBackend(url);
  }

  function onGrantAdminRoleClick() {
      let url = "/authTest/grantAdminRights";
      backEndApiCall(url, 'POST', () => alert("Роль предоставлена"));
  }

  function onDemoteAdminRoleClick() {
        let url = "/authTest/demoteAdmin";
        backEndApiCall(url, 'POST', () => alert("Роль понижена"));
    }

  function backEndApiCall(url, method, successCallback) {
      firebase.auth().currentUser.getIdToken(true).then((token) => {
        let headers;
        if (token) {
            headers = {
              Authorization: `Bearer ${token}`
            };
        }

        fetch(url, {
          method: method,
          headers: headers
        })
        .then(response => {

          if (response.status === 401) {
            alert("Ошибка авторизации");
            return;
          }

          if (response.status === 403) {
            alert("Доступ запрещен");
            return;
          }

          if (!response.ok) {
              response.text()
               .then(text => {
                 alert(`Ошибка HTTP: ${response.status}. ${text}`);
               });

              return;
          }

          if (successCallback) {
            successCallback(response);
          }
        })
        .catch(response => {
          alert("Ошибка HTTP: " + response.status);
        });
      }).catch(response => {
          alert("Ошибка получения токена");
        });
  }

  function updateBackendSignedInUserStatusUI(user) {
    if (user) {
          document.getElementById('backend-sign-in-status').textContent = 'Signed in';
          document.getElementById('backend-account-details').textContent = JSON.stringify(user, null, '  ');
        } else {
          document.getElementById('backend-sign-in-status').textContent = 'Signed out';
          document.getElementById('backend-account-details').textContent = 'null';
        }
  }
</script>
</body>
</html>
